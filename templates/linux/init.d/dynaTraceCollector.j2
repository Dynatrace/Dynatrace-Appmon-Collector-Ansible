#!/bin/sh
### Start/Stop Dynatrace Collector daemon
#
# Copyright 2004-2016 Dynatrace Software
# All rights reserved.
#
# Copy this script to /etc/init.d and use chkconfig for enabling/disabling
# the daemon. In order to run multiple Collectors on the same host,
# further adjustments may be necessary. Depending on the target environment
# adjustments may be necessary.
#
### BEGIN INIT INFO
# Provides: dynaTraceCollector
# Required-Start: $network
# Required-Stop: $network
# X-UnitedLinux-Should-Start:
# Default-Start: {{ linux_service_start_runlevels }}
# Default-Stop: {{ linux_service_stop_runlevels }}
# Description: Start/Stop Dynatrace Collector daemon
### END INIT INFO

# To use this file in your environment, adjusting the following variables:
# - DT_HOME     	installation directory of Dynatrace software
# - DT_OPTARGS  	optional arguments (e.g. -vm, -server, etc.)
# - DT_INSTANCE 	instance name for the collector instance
# - DT_RUNASUSER	the user to run the Dynatrace process

DT_HOME={{ dynatrace_collector_linux_install_dir }}/dynatrace
DT_OPTARGS="-listenOneAgent {{ dynatrace_collector_appmon_agent_port }} -listen {{ dynatrace_collector_agent_port }} -server {{ dynatrace_collector_server_hostname }}:{{ dynatrace_collector_server_port }}{% if dynatrace_collector_jvm_xms %} -Xms{{ dynatrace_collector_jvm_xms }}{% endif %}{% if dynatrace_collector_jvm_xmx %} -Xmx{{ dynatrace_collector_jvm_xmx }}{% endif %}{% if dynatrace_collector_jvm_perm_size %} -XX:PermSize={{ dynatrace_collector_jvm_perm_size }}{% endif %}{% if dynatrace_collector_jvm_max_perm_size %} -XX:MaxPermSize={{ dynatrace_collector_jvm_max_perm_size }}{% endif %}"

DT_INSTANCE=

DT_RUNASUSER={{ dynatrace_collector_owner }}

DT_PRODUCT=Collector
DT_BINARY=dtcollector

# How long to wait for shutdown
DT_SHUTDOWN_WAIT=60

OS_TYPE=`uname`

DT_PIDFILE_DIR="${DT_HOME}/collector"

DT_PIDFILE=${DT_PIDFILE_DIR}/${DT_BINARY}70.pid
if [ -n "${DT_INSTANCE}" ]; then
	DT_PIDFILE=${DT_PIDFILE_DIR}/${DT_BINARY}70_${DT_INSTANCE}.pid
fi
if [ ! -x "${DT_HOME}/${DT_BINARY}" ]; then
  echo "File not found or not executable: ${DT_HOME}/${DT_BINARY}"
  exit 1
fi
if [ -f "${DT_PIDFILE}" ]; then
  PROCESSPID=$(cat ${DT_PIDFILE})
  ps -p ${PROCESSPID} > /dev/null
  if [ $? -ne 0 ]; then
    PROCESSPID=""
    if [ -f ${DT_PIDFILE} ]; then
      rm -f ${DT_PIDFILE}
    fi
  fi
fi

# fallback in case the code above fails to find a pid
if [ -z "${PROCESSPID}" ]; then
    if [ -z "${DT_INSTANCE}" ]; then
        PROCESSPID=`ps -ef | grep -v "instance" | grep -v "grep" | grep -v "systemctl" | grep -v "screen" | grep ${DT_BINARY} | grep -v org.eclipse.equinox | awk '{% raw %}{{print $2}}{% endraw %}'`
    else
        PROCESSPID=`ps -ef | grep ${DT_BINARY} | grep -v "systemctl" | grep -v "screen" | grep " ${DT_INSTANCE} " | grep -v org.eclipse.equinox | awk '{% raw %}{{print $2}}{% endraw %}'`
    fi
fi

checkleftoverpid() {
	if [ -n "$3" ] && ps -p $3 > /dev/null; then
			echo "Dynatrace $1 daemon is already running!"
			exit 0
	else
		if [ -f $2 ]; then
			rm -f $2
		fi
	fi
}

case "$1" in
'start')
	checkleftoverpid "${DT_PRODUCT}" ${DT_PIDFILE} ${PROCESSPID}
    if [ -z "${PROCESSPID}" ]; then
		if [ -z "${DT_INSTANCE}" ]; then
			if [ -z "${DT_RUNASUSER}" ]; then
				echo "${DT_HOME}"/${DT_BINARY} -bg ${DT_OPTARGS} -pidfile ${DT_PIDFILE}
				"${DT_HOME}"/${DT_BINARY} -bg ${DT_OPTARGS} -pidfile ${DT_PIDFILE}
			else
				echo "${DT_HOME}"/${DT_BINARY} -bg "${DT_OPTARGS}" -pidfile ${DT_PIDFILE}
				if [ "$OS_TYPE" = 'SunOS' ] || [ "$OS_TYPE" = 'AIX' ]; then
					su "${DT_RUNASUSER}" -c "${DT_HOME}/${DT_BINARY} -bg ${DT_OPTARGS} -pidfile ${DT_PIDFILE}"
				else
					su -c "${DT_HOME}/${DT_BINARY} -bg ${DT_OPTARGS} -pidfile ${DT_PIDFILE}" "${DT_RUNASUSER}"
				fi
			fi
		else
			if [ -z "${DT_RUNASUSER}" ]; then
				echo "${DT_HOME}"/${DT_BINARY} -instance "${DT_INSTANCE}" -bg "${DT_OPTARGS}" -pidfile ${DT_PIDFILE}
				"${DT_HOME}"/${DT_BINARY} -instance "${DT_INSTANCE}" -bg ${DT_OPTARGS} -pidfile ${DT_PIDFILE}
			else
				echo "${DT_HOME}"/${DT_BINARY} -instance "${DT_INSTANCE}" -bg "${DT_OPTARGS}" -pidfile ${DT_PIDFILE}
				if [ "$OS_TYPE" = 'SunOS' ] || [ "$OS_TYPE" = 'AIX' ]; then
					su "${DT_RUNASUSER}" -c "${DT_HOME}/${DT_BINARY} -instance ${DT_INSTANCE} -bg ${DT_OPTARGS} -pidfile ${DT_PIDFILE}"
				else
					su -c "${DT_HOME}/${DT_BINARY} -instance ${DT_INSTANCE} -bg ${DT_OPTARGS} -pidfile ${DT_PIDFILE}" "${DT_RUNASUSER}"
				fi
			fi
		fi
    else
		echo "Dynatrace ${DT_PRODUCT} daemon is already running!"
		exit 0
    fi
    ;;
'stop')
    if [ -n "${PROCESSPID}" ]; then
		echo "Terminating Dynatrace $DT_PRODUCT process ${PROCESSPID}"
		kill -15 ${PROCESSPID}
		COUNT=0
		while [ `ps -A -o pid | grep -c ${PROCESSPID}` -gt 0 ] && [ "${COUNT}" -lt "${DT_SHUTDOWN_WAIT}" ] # `ps --pid ${PROCESSPID} | grep -c ${PROCESSPID}` -ne 0]
		do
			echo "Waiting for Dynatrace ${DT_PRODUCT} (${PROCESSPID}) to finish shutdown";
			sleep 1
			COUNT=`expr ${COUNT} + 1`
		done
		if [ "${COUNT}" -gt "${DT_SHUTDOWN_WAIT}" ]; then
			echo "Killing Dynatrace ${DT_PRODUCT} (${PROCESSPID}) because the shutdown lasted longer than ${DT_SHUTDOWN_WAIT} seconds"
			kill -9 ${PROCESSPID}
		fi
		if [ -f "${DT_PIDFILE}" ]; then
			rm -f ${DT_PIDFILE}
		fi
    fi
    ;;
'version')
    "${DT_HOME}"/${DT_BINARY} -v
    ;;
'status')
	checkleftoverpid "${DT_PRODUCT}" ${DT_PIDFILE} ${PROCESSPID}
    if [ -n "${PROCESSPID}" ]; then
		echo "Dynatrace ${DT_PRODUCT} daemon is running:"
		ps -ef | grep ${DT_BINARY} | grep ${PROCESSPID}
        # | grep -v org.eclipse.equinox
    else
		echo "Dynatrace ${DT_PRODUCT} daemon not running."
		exit 1
    fi
    ;;
*)
    echo "usage: $0 {start|stop|status|version}"
    ;;
esac

exit 0
